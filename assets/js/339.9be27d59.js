(window.webpackJsonp=window.webpackJsonp||[]).push([[339],{1065:function(a,t,s){"use strict";s.r(t);var e=s(2),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"shell脚本编程30分钟入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell脚本编程30分钟入门"}},[a._v("🌙")]),a._v(" Shell脚本编程30分钟入门")]),a._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://github.com/qinjx/30min_guides/edit/master/shell.md",target:"_blank",rel:"noopener noreferrer"}},[a._v("源自：30min_guides"),t("OutboundLink")],1)])]),a._v(" "),t("h2",{attrs:{id:"什么是shell脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是shell脚本"}},[a._v("🌙")]),a._v(" 什么是Shell脚本")]),a._v(" "),t("h3",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[a._v("🌙")]),a._v(" 示例")]),a._v(" "),t("p",[a._v("看个例子吧：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("#!/bin/sh\ncd ~\nmkdir shell_tut\ncd shell_tut\n\nfor ((i=0; i<10; i++)); do\n\ttouch test_$i.txt\ndone\n")])])]),t("h3",{attrs:{id:"示例解释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例解释"}},[a._v("🌙")]),a._v(" 示例解释")]),a._v(" "),t("ul",[t("li",[a._v("第1行：指定脚本解释器，这里是用/bin/sh做解释器的")]),a._v(" "),t("li",[a._v("第2行：切换到当前用户的home目录")]),a._v(" "),t("li",[a._v("第3行：创建一个目录shell_tut")]),a._v(" "),t("li",[a._v("第4行：切换到shell_tut目录")]),a._v(" "),t("li",[a._v("第5行：循环条件，一共循环10次")]),a._v(" "),t("li",[a._v("第6行：创建一个test_0…9.txt文件")]),a._v(" "),t("li",[a._v("第7行：循环体结束")])]),a._v(" "),t("p",[a._v("mkdir, touch都是系统自带的程序，一般在/bin或者/usr/bin目录下。for, do, done是sh脚本语言的关键字。")]),a._v(" "),t("h3",{attrs:{id:"shell和shell脚本的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shell和shell脚本的概念"}},[a._v("🌙")]),a._v(" shell和shell脚本的概念")]),a._v(" "),t("p",[a._v("shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。")]),a._v(" "),t("p",[a._v("shell脚本（shell script），是一种为shell编写的脚本程序。业界所说的shell通常都是指shell脚本，但读者朋友要知道，shell和shell script是两个不同的概念。由于习惯的原因，简洁起见，本文出现的“shell编程”都是指shell脚本编程，不是指开发shell自身（如Windows Explorer扩展开发）。")]),a._v(" "),t("h2",{attrs:{id:"环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境"}},[a._v("🌙")]),a._v(" 环境")]),a._v(" "),t("p",[a._v("shell编程跟java、php编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。")]),a._v(" "),t("h3",{attrs:{id:"os"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#os"}},[a._v("🌙")]),a._v(" OS")]),a._v(" "),t("p",[a._v("当前主流的操作系统都支持shell编程，本文档所述的shell编程是指Linux下的shell，讲的基本都是POSIX标准下的功能，所以，也适用于Unix及BSD（如Mac OS）。")]),a._v(" "),t("h4",{attrs:{id:"linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[a._v("🌙")]),a._v(" Linux")]),a._v(" "),t("p",[a._v("Linux默认安装就带了shell解释器。")]),a._v(" "),t("h4",{attrs:{id:"mac-os"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mac-os"}},[a._v("🌙")]),a._v(" Mac OS")]),a._v(" "),t("p",[a._v("Mac OS不仅带了sh、bash这两个最基础的解释器，还内置了ksh、csh、zsh等不常用的解释器。")]),a._v(" "),t("h4",{attrs:{id:"windows上的模拟器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#windows上的模拟器"}},[a._v("🌙")]),a._v(" Windows上的模拟器")]),a._v(" "),t("p",[a._v("windows出厂时没有内置shell解释器，需要自行安装，为了同时能用grep, awk, curl等工具，最好装一个cygwin或者mingw来模拟linux环境。")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.cygwin.com",target:"_blank",rel:"noopener noreferrer"}},[a._v("cygwin"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"http://www.mingw.org",target:"_blank",rel:"noopener noreferrer"}},[a._v("mingw"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"脚本解释器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚本解释器"}},[a._v("🌙")]),a._v(" 脚本解释器")]),a._v(" "),t("h4",{attrs:{id:"sh"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sh"}},[a._v("🌙")]),a._v(" sh")]),a._v(" "),t("p",[a._v("即Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh，由Bell Labs开发。")]),a._v(" "),t("p",[a._v("本文讲的是sh，如果你使用其它语言用作shell编程，请自行参考相应语言的文档。")]),a._v(" "),t("h4",{attrs:{id:"bash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash"}},[a._v("🌙")]),a._v(" bash")]),a._v(" "),t("p",[a._v("Bash是Bourne shell的替代品，属GNU Project，二进制文件路径通常是/bin/bash。业界通常混用bash、sh、和shell，比如你会经常在招聘运维工程师的文案中见到：熟悉Linux Bash编程，精通Shell编程。")]),a._v(" "),t("p",[a._v("在CentOS里，/bin/sh是一个指向/bin/bash的符号链接:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("[root@centosraw ~]# ls -l /bin/*sh\n-rwxr-xr-x. 1 root root 903272 Feb 22 05:09 /bin/bash\n-rwxr-xr-x. 1 root root 106216 Oct 17  2012 /bin/dash\nlrwxrwxrwx. 1 root root      4 Mar 22 10:22 /bin/sh -> bash\n")])])]),t("p",[a._v("但在Mac OS上不是，/bin/sh和/bin/bash是两个不同的文件，尽管它们的大小只相差100字节左右:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("iMac:~ wuxiao$ ls -l /bin/*sh\n-r-xr-xr-x  1 root  wheel  1371648  6 Nov 16:52 /bin/bash\n-rwxr-xr-x  2 root  wheel   772992  6 Nov 16:52 /bin/csh\n-r-xr-xr-x  1 root  wheel  2180736  6 Nov 16:52 /bin/ksh\n-r-xr-xr-x  1 root  wheel  1371712  6 Nov 16:52 /bin/sh\n-rwxr-xr-x  2 root  wheel   772992  6 Nov 16:52 /bin/tcsh\n-rwxr-xr-x  1 root  wheel  1103984  6 Nov 16:52 /bin/zsh\n")])])]),t("h4",{attrs:{id:"高级编程语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级编程语言"}},[a._v("🌙")]),a._v(" 高级编程语言")]),a._v(" "),t("p",[a._v("理论上讲，只要一门语言提供了解释器（而不仅是编译器），这门语言就可以胜任脚本编程，常见的解释型语言都是可以用作脚本编程的，如：Perl、Tcl、Python、PHP、Ruby。Perl是最老牌的脚本编程语言了，Python这些年也成了一些linux发行版的预置解释器。")]),a._v(" "),t("p",[a._v("编译型语言，只要有解释器，也可以用作脚本编程，如C shell是内置的（/bin/csh），Java有第三方解释器Jshell，Ada有收费的解释器AdaScript。")]),a._v(" "),t("p",[a._v("如下是一个PHP Shell Script示例（假设文件名叫test.php）：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('#!/usr/bin/php\n<?php\nfor ($i=0; $i < 10; $i++)\n        echo $i . "\\n";\n')])])]),t("p",[a._v("执行：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/usr/bin/php test.php\n")])])]),t("p",[a._v("或者：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("chmod +x test.php\n./test.php\n")])])]),t("h2",{attrs:{id:"如何选择shell编程语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何选择shell编程语言"}},[a._v("🌙")]),a._v(" 如何选择shell编程语言")]),a._v(" "),t("h3",{attrs:{id:"熟悉-vs-陌生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#熟悉-vs-陌生"}},[a._v("🌙")]),a._v(" 熟悉 vs 陌生")]),a._v(" "),t("p",[a._v("如果你已经掌握了一门编程语言（如PHP、Python、Java、JavaScript），建议你就直接使用这门语言编写脚本程序，虽然某些地方会有点啰嗦，但你能利用在这门语言领域里的经验（单元测试、单步调试、IDE、第三方类库）。")]),a._v(" "),t("p",[a._v("新增的学习成本很小，只要学会怎么使用shell解释器（Jshell、AdaScript）就可以了。")]),a._v(" "),t("h3",{attrs:{id:"简单-vs-高级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单-vs-高级"}},[a._v("🌙")]),a._v(" 简单 vs 高级")]),a._v(" "),t("p",[a._v("如果你觉得自己熟悉的语言（如Java、C）写shell脚本实在太啰嗦，你只是想做一些备份文件、安装软件、下载数据之类的事情，学着使用sh，bash会是一个好主意。")]),a._v(" "),t("p",[a._v("shell只定义了一个非常简单的编程语言，所以，如果你的脚本程序复杂度较高，或者要操作的数据结构比较复杂，那么还是应该使用Python、Perl这样的脚本语言，或者是你本来就已经很擅长的高级语言。因为sh和bash在这方面很弱，比如说：")]),a._v(" "),t("ul",[t("li",[a._v("它的函数只能返回字串，无法返回数组")]),a._v(" "),t("li",[a._v("它不支持面向对象，你无法实现一些优雅的设计模式")]),a._v(" "),t("li",[a._v("它是解释型的，一边解释一边执行，连PHP那种预编译都不是，如果你的脚本包含错误(例如调用了不存在的函数)，只要没执行到这一行，就不会报错")])]),a._v(" "),t("h3",{attrs:{id:"环境兼容性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境兼容性"}},[a._v("🌙")]),a._v(" 环境兼容性")]),a._v(" "),t("p",[a._v("如果你的脚本是提供给别的用户使用，使用sh或者bash，你的脚本将具有最好的环境兼容性，perl很早就是linux标配了，python这些年也成了一些linux发行版的标配，至于mac os，它默认安装了perl、python、ruby、php、java等主流编程语言。")]),a._v(" "),t("h2",{attrs:{id:"第一个shell脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一个shell脚本"}},[a._v("🌙")]),a._v(" 第一个shell脚本")]),a._v(" "),t("h3",{attrs:{id:"编写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写"}},[a._v("🌙")]),a._v(" 编写")]),a._v(" "),t("p",[a._v("打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php写shell 脚本，扩展名就用php好了。")]),a._v(" "),t("p",[a._v("输入一些代码，第一行一般是这样：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("#!/bin/bash\n#!/usr/bin/php\n")])])]),t("p",[a._v("“#!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。")]),a._v(" "),t("h3",{attrs:{id:"运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行"}},[a._v("🌙")]),a._v(" 运行")]),a._v(" "),t("p",[a._v("运行Shell脚本有两种方法：")]),a._v(" "),t("h4",{attrs:{id:"作为可执行程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作为可执行程序"}},[a._v("🌙")]),a._v(" 作为可执行程序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("chmod +x test.sh\n./test.sh\n")])])]),t("p",[a._v("注意，一定要写成./test.sh，而不是test.sh，运行其它二进制的程序也一样，直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。")]),a._v(" "),t("p",[a._v("通过这种方式运行bash脚本，第一行一定要写对，好让系统查找到正确的解释器。")]),a._v(" "),t("p",[a._v('这里的"系统"，其实就是shell这个应用程序（想象一下Windows Explorer），但我故意写成系统，是方便理解，既然这个系统就是指shell，那么一个使用/bin/sh作为解释器的脚本是不是可以省去第一行呢？是的。')]),a._v(" "),t("h4",{attrs:{id:"作为解释器参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作为解释器参数"}},[a._v("🌙")]),a._v(" 作为解释器参数")]),a._v(" "),t("p",[a._v("这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名，如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("/bin/sh test.sh\n/bin/php test.php\n")])])]),t("p",[a._v("这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。")]),a._v(" "),t("h2",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("🌙")]),a._v(" 变量")]),a._v(" "),t("h3",{attrs:{id:"定义变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义变量"}},[a._v("🌙")]),a._v(" 定义变量")]),a._v(" "),t("p",[a._v("定义变量时，变量名不加美元符号（$），如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('your_name="qinjx"\n')])])]),t("p",[a._v("注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。")]),a._v(" "),t("p",[a._v("除了显式地直接赋值，还可以用语句给变量赋值，如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("for file in `ls /etc`\n")])])]),t("h3",{attrs:{id:"使用变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用变量"}},[a._v("🌙")]),a._v(" 使用变量")]),a._v(" "),t("p",[a._v("使用一个定义过的变量，只要在变量名前面加美元符号即可，如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('your_name="qinjx"\necho $your_name\necho ${your_name}\n')])])]),t("p",[a._v("变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('for skill in Ada Coffe Action Java; do\n\techo "I am good at ${skill}Script"\ndone\n')])])]),t("p",[a._v('如果不给skill变量加花括号，写成echo "I am good at $skillScript"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。')]),a._v(" "),t("p",[a._v("推荐给所有变量加上花括号，这是个好的编程习惯。IntelliJ IDEA编写shell script时，IDE就会提示加花括号。")]),a._v(" "),t("h3",{attrs:{id:"重定义变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重定义变量"}},[a._v("🌙")]),a._v(" 重定义变量")]),a._v(" "),t("p",[a._v("已定义的变量，可以被重新定义，如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('your_name="qinjx"\necho $your_name\n\nyour_name="alibaba"\necho $your_name\n')])])]),t("p",[a._v('这样写是合法的，但注意，第二次赋值的时候不能写$your_name="alibaba"，使用变量的时候才加美元符。')]),a._v(" "),t("h2",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[a._v("🌙")]),a._v(" 注释")]),a._v(" "),t("p",[a._v("以“#”开头的行就是注释，会被解释器忽略。")]),a._v(" "),t("h3",{attrs:{id:"多行注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多行注释"}},[a._v("🌙")]),a._v(" 多行注释")]),a._v(" "),t("p",[a._v("sh里没有多行注释，只能每一行加一个#号。就像这样：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("#--------------------------------------------\n# 这是一个自动打ipa的脚本，基于webfrogs的ipa-build书写：https://github.com/webfrogs/xcode_shell/blob/master/ipa-build\n\n# 功能：自动为etao ios app打包，产出物为14个渠道的ipa包\n# 特色：全自动打包，不需要输入任何参数\n#--------------------------------------------\n\n##### 用户配置区 开始 #####\n#\n#\n# 项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了\n# 应用名，确保和Xcode里Product下的target_name.app名字一致\n#\n##### 用户配置区 结束  #####\n")])])]),t("p",[a._v("如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。")]),a._v(" "),t("h2",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[a._v("🌙")]),a._v(" 字符串")]),a._v(" "),t("p",[a._v("字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了，哈哈），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。")]),a._v(" "),t("h3",{attrs:{id:"单引号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单引号"}},[a._v("🌙")]),a._v(" 单引号")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("str='this is a string'\n")])])]),t("p",[a._v("单引号字符串的限制：")]),a._v(" "),t("ul",[t("li",[a._v("单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的")]),a._v(" "),t("li",[a._v("单引号字串中不能出现单引号（对单引号使用转义符后也不行）")])]),a._v(" "),t("h3",{attrs:{id:"双引号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双引号"}},[a._v("🌙")]),a._v(" 双引号")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('your_name=\'qinjx\'\nstr="Hello, I know your are \\"$your_name\\"! \\n"\n')])])]),t("ul",[t("li",[a._v("双引号里可以有变量")]),a._v(" "),t("li",[a._v("双引号里可以出现转义字符")])]),a._v(" "),t("h3",{attrs:{id:"字符串操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作"}},[a._v("🌙")]),a._v(" 字符串操作")]),a._v(" "),t("h4",{attrs:{id:"拼接字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拼接字符串"}},[a._v("🌙")]),a._v(" 拼接字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('your_name="qinjx"\ngreeting="hello, "$your_name" !"\ngreeting_1="hello, ${your_name} !"\n\necho $greeting $greeting_1\n')])])]),t("h4",{attrs:{id:"获取字符串长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取字符串长度"}},[a._v("🌙")]),a._v(" 获取字符串长度：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('string="abcd"\necho ${#string} #输出：4\n')])])]),t("h4",{attrs:{id:"提取子字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提取子字符串"}},[a._v("🌙")]),a._v(" 提取子字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('string="alibaba is a great company"\necho ${string:1:4} #输出：liba\n')])])]),t("h4",{attrs:{id:"查找子字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找子字符串"}},[a._v("🌙")]),a._v(" 查找子字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('string="alibaba is a great company"\necho `expr index "$string" is`#输出：3，这个语句的意思是：找出字母i在这名话中的位置，要在linux下运行，mac下会报错\n')])])]),t("h4",{attrs:{id:"更多"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更多"}},[a._v("🌙")]),a._v(" 更多")]),a._v(" "),t("p",[a._v("参见本文档末尾的参考资料中"),t("a",{attrs:{href:"http://tldp.org/LDP/abs/html/string-manipulation.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Advanced Bash-Scripting Guid Chapter 10.1"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("🌙")]),a._v(" 数组")]),a._v(" "),t("h2",{attrs:{id:"管道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#管道"}},[a._v("🌙")]),a._v(" 管道")]),a._v(" "),t("h2",{attrs:{id:"条件判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#条件判断"}},[a._v("🌙")]),a._v(" 条件判断")]),a._v(" "),t("h2",{attrs:{id:"流程控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[a._v("🌙")]),a._v(" 流程控制")]),a._v(" "),t("p",[a._v("和Java、PHP等语言不一样，sh的流程控制不可为空，如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('<?php\nif (isset($_GET["q"])) {\n\tsearch(q);\n}\nelse {\n\t//do nothing\n}\n')])])]),t("p",[a._v("在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。")]),a._v(" "),t("p",[a._v("还要注意，sh里的if [ $foo -eq 0 ]，这个方括号跟Java/PHP里if后面的圆括号大不相同，它是一个可执行程序（和ls, grep一样），想不到吧？在CentOS上，它在/usr/bin目录下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("ll /usr/bin/[\n-rwxr-xr-x. 1 root root 33408 6月  22 2012 /usr/bin/[\n")])])]),t("p",[a._v("正因为方括号在这里是一个可执行程序，方括号后面必须加空格，不能写成if [$foo -eq 0]")]),a._v(" "),t("h3",{attrs:{id:"if-else"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-else"}},[a._v("🌙")]),a._v(" if else")]),a._v(" "),t("h4",{attrs:{id:"if"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if"}},[a._v("🌙")]),a._v(" if")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("if condition\nthen\n\tcommand1 \n\tcommand2\n\t...\n\tcommandN \nfi\n")])])]),t("p",[a._v("写成一行（适用于终端命令提示符）：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("if `ps -ef | grep ssh`;  then echo hello; fi\n")])])]),t("p",[a._v("末尾的fi就是if倒过来拼写，后面还会遇到类似的")]),a._v(" "),t("h4",{attrs:{id:"if-else-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-else-2"}},[a._v("🌙")]),a._v(" if else")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("if condition\nthen\n\tcommand1 \n\tcommand2\n\t...\n\tcommandN\nelse\n\tcommand\nfi\n")])])]),t("h4",{attrs:{id:"if-else-if-else"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-else-if-else"}},[a._v("🌙")]),a._v(" if else-if else")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("if condition1\nthen\n\tcommand1\nelif condition2\n\tcommand2\nelse\n\tcommandN\nfi\n")])])]),t("h3",{attrs:{id:"for-while"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-while"}},[a._v("🌙")]),a._v(" for while")]),a._v(" "),t("h4",{attrs:{id:"for"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for"}},[a._v("🌙")]),a._v(" for")]),a._v(" "),t("p",[a._v("在开篇的示例里演示过了：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("for var in item1 item2 ... itemN\ndo\n\tcommand1\n\tcommand2\n\t...\n\tcommandN\ndone\n")])])]),t("p",[a._v("写成一行：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("for var in item1 item2 ... itemN; do command1; command2… done;\n")])])]),t("h4",{attrs:{id:"c风格的for"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c风格的for"}},[a._v("🌙")]),a._v(" C风格的for")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("for (( EXP1; EXP2; EXP3 ))\ndo\n\tcommand1\n\tcommand2\n\tcommand3\ndone\n")])])]),t("h4",{attrs:{id:"while"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while"}},[a._v("🌙")]),a._v(" while")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("while condition\ndo\n\tcommand\ndone\n")])])]),t("h4",{attrs:{id:"无限循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无限循环"}},[a._v("🌙")]),a._v(" 无限循环")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("while :\ndo\n\tcommand\ndone\n")])])]),t("p",[a._v("或者")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("while true\ndo\n\tcommand\ndone\n")])])]),t("p",[a._v("或者")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("for (( ; ; ))\n")])])]),t("h4",{attrs:{id:"until"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#until"}},[a._v("🌙")]),a._v(" until")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("until condition\ndo\n\tcommand\ndone\n")])])]),t("h3",{attrs:{id:"case"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#case"}},[a._v("🌙")]),a._v(" case")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('case "${opt}" in\n\t"Install-Puppet-Server" )\n\t\tinstall_master $1\n\t\texit\n\t;;\n\n\t"Install-Puppet-Client" )\n\t\tinstall_client $1\n\t\texit\n\t;;\n\n\t"Config-Puppet-Server" )\n\t\tconfig_puppet_master\n\t\texit\n\t;;\n\n\t"Config-Puppet-Client" )\n\t\tconfig_puppet_client\n\t\texit\n\t;;\n\n\t"Exit" )\n\t\texit\n\t;;\n\n\t* ) echo "Bad option, please choose again"\nesac\n')])])]),t("p",[a._v("case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break")]),a._v(" "),t("h2",{attrs:{id:"函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[a._v("🌙")]),a._v(" 函数")]),a._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[a._v("🌙")]),a._v(" 定义")]),a._v(" "),t("h3",{attrs:{id:"调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用"}},[a._v("🌙")]),a._v(" 调用")]),a._v(" "),t("h2",{attrs:{id:"文件包含"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件包含"}},[a._v("🌙")]),a._v(" 文件包含")]),a._v(" "),t("p",[a._v("可以使用source和.关键字，如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("source ./function.sh\n. ./function.sh\n")])])]),t("p",[a._v("在bash里，source和.是等效的，他们都是读入function.sh的内容并执行其内容（类似PHP里的include），为了更好的可移植性，推荐使用第二种写法。")]),a._v(" "),t("p",[a._v("包含一个文件和执行一个文件一样，也要写这个文件的路径，不能光写文件名，比如上述例子中:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v(". ./function.sh\n")])])]),t("p",[a._v("不可以写作：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v(". function.sh\n")])])]),t("p",[a._v("如果function.sh是用户传入的参数，如何获得它的绝对路径呢？方法是：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("real_path=`readlink -f $1`#$1是用户输入的参数，如function.sh\n. $real_path\n")])])]),t("h2",{attrs:{id:"用户输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户输入"}},[a._v("🌙")]),a._v(" 用户输入")]),a._v(" "),t("h3",{attrs:{id:"执行脚本时传入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行脚本时传入"}},[a._v("🌙")]),a._v(" 执行脚本时传入")]),a._v(" "),t("h3",{attrs:{id:"脚本运行中输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚本运行中输入"}},[a._v("🌙")]),a._v(" 脚本运行中输入")]),a._v(" "),t("h3",{attrs:{id:"select菜单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select菜单"}},[a._v("🌙")]),a._v(" select菜单")]),a._v(" "),t("h2",{attrs:{id:"stdin和stdout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stdin和stdout"}},[a._v("🌙")]),a._v(" stdin和stdout")]),a._v(" "),t("h2",{attrs:{id:"常用的命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的命令"}},[a._v("🌙")]),a._v(" 常用的命令")]),a._v(" "),t("p",[a._v("sh脚本结合系统命令便有了强大的威力，在字符处理领域，有grep、awk、sed三剑客，grep负责找出特定的行，awk能将行拆分成多个字段，sed则可以实现更新插入删除等写操作。")]),a._v(" "),t("h3",{attrs:{id:"ps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ps"}},[a._v("🌙")]),a._v(" ps")]),a._v(" "),t("p",[a._v("查看进程列表")]),a._v(" "),t("h3",{attrs:{id:"grep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grep"}},[a._v("🌙")]),a._v(" grep")]),a._v(" "),t("h4",{attrs:{id:"排除grep自身"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#排除grep自身"}},[a._v("🌙")]),a._v(" 排除grep自身")]),a._v(" "),t("h4",{attrs:{id:"查找与target相邻的结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找与target相邻的结果"}},[a._v("🌙")]),a._v(" 查找与target相邻的结果")]),a._v(" "),t("h3",{attrs:{id:"awk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#awk"}},[a._v("🌙")]),a._v(" awk")]),a._v(" "),t("h3",{attrs:{id:"sed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sed"}},[a._v("🌙")]),a._v(" sed")]),a._v(" "),t("h4",{attrs:{id:"插入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[a._v("🌙")]),a._v(" 插入")]),a._v(" "),t("h4",{attrs:{id:"替换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#替换"}},[a._v("🌙")]),a._v(" 替换")]),a._v(" "),t("h4",{attrs:{id:"删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[a._v("🌙")]),a._v(" 删除")]),a._v(" "),t("h3",{attrs:{id:"xargs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xargs"}},[a._v("🌙")]),a._v(" xargs")]),a._v(" "),t("h3",{attrs:{id:"curl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#curl"}},[a._v("🌙")]),a._v(" curl")]),a._v(" "),t("h2",{attrs:{id:"综合案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#综合案例"}},[a._v("🌙")]),a._v(" 综合案例")]),a._v(" "),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("🌙")]),a._v(" 参考资料")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://tldp.org/LDP/abs/html/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Advanced Bash-Scripting Guide"),t("OutboundLink")],1),a._v("，非常详细，非常易读，大量example，既可以当入门教材，也可以当做工具书查阅")]),a._v(" "),t("li",[t("a",{attrs:{href:"http://www.tutorialspoint.com/unix/unix-shell.htm",target:"_blank",rel:"noopener noreferrer"}},[a._v("Unix Shell Programming"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"http://bash.cyberciti.biz/guide/Main_Page",target:"_blank",rel:"noopener noreferrer"}},[a._v("Linux Shell Scripting Tutorial - A Beginner's handbook"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);