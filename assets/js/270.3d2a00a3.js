(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{984:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"next-js-缓存与重新验证机制详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#next-js-缓存与重新验证机制详解"}},[t._v("🌙")]),t._v(" Next.js 缓存与重新验证机制详解")]),t._v(" "),s("h3",{attrs:{id:"一、next-js-缓存机制详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、next-js-缓存机制详解"}},[t._v("🌙")]),t._v(" 一、Next.js 缓存机制详解")]),t._v(" "),s("p",[t._v("Next.js 的缓存是一个精密的多层系统，它协同工作，以在服务器和客户端之间提供极致的速度和灵活性。")]),t._v(" "),s("h4",{attrs:{id:"第一层-请求记忆化-request-memoization-厨师的短期记忆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一层-请求记忆化-request-memoization-厨师的短期记忆"}},[t._v("🌙")]),t._v(" "),s("strong",[t._v("第一层：请求记忆化 (Request Memoization) - 厨师的短期记忆")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("它是什么？")]),t._v(" 在"),s("strong",[t._v("单次服务端渲染")]),t._v("过程中，对 "),s("code",[t._v("fetch")]),t._v(" 请求的自动去重。")]),t._v(" "),s("li",[s("strong",[t._v("它在哪里？")]),t._v(" 服务器内存中，仅在单次请求-响应周期内有效。")]),t._v(" "),s("li",[s("strong",[t._v("底层原理：")]),t._v(" Next.js 自动使用 React 的 "),s("code",[t._v("cache")]),t._v(" 函数包裹了原生的 "),s("code",[t._v("fetch")]),t._v(" API。当一个被 "),s("code",[t._v("cache")]),t._v(" 包裹的函数首次执行时，React 会用函数参数作为键（Key），用返回值作为值（Value），存入一个临时的 Map 中。在同一次渲染树中，后续使用相同参数的调用会直接命中这个 Map，从而避免了重复执行函数体（即重复的网络请求）。这是一种典型的**记忆化（Memoization）**模式。")]),t._v(" "),s("li",[s("strong",[t._v("如何控制：")]),t._v(" 对于 "),s("code",[t._v("fetch")]),t._v(" 是全自动的。如果你有不使用 "),s("code",[t._v("fetch")]),t._v(" 的自定义数据获取函数（例如直接调用数据库客户端），你应该手动用 "),s("code",[t._v("import { cache } from 'react'")]),t._v(" 包裹它，以获得同样的好处。")])]),t._v(" "),s("h4",{attrs:{id:"第二层-数据缓存-data-cache-备好的食材冷库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二层-数据缓存-data-cache-备好的食材冷库"}},[t._v("🌙")]),t._v(" "),s("strong",[t._v("第二层：数据缓存 (Data Cache) - 备好的食材冷库")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("它是什么？")]),t._v(" 一个"),s("strong",[t._v("持久化")]),t._v("在服务器端的数据缓存，用于存储 "),s("code",[t._v("fetch")]),t._v(" 请求的结果。这是实现 SSG（静态站点生成）和 ISR（增量静态再生）的基石。")]),t._v(" "),s("li",[s("strong",[t._v("它在哪里？")]),t._v(" 默认在 Next.js 服务器的"),s("strong",[t._v("文件系统")]),t._v("中（"),s("code",[t._v(".next/cache/fetch-cache")]),t._v("）。在 Vercel 等平台上，它会被存储在分布式的边缘缓存网络中，实现全球加速。")]),t._v(" "),s("li",[s("strong",[t._v("底层原理：")]),t._v(" Next.js 对 "),s("code",[t._v("fetch")]),t._v(" API 进行了扩展。当你在服务器组件中调用 "),s("code",[t._v("fetch")]),t._v(" 时：\n"),s("ol",[s("li",[s("strong",[t._v("生成缓存键：")]),t._v(" Next.js 会根据请求的 URL、方法（GET）、Headers 和 Body 生成一个唯一的哈希键。")]),t._v(" "),s("li",[s("strong",[t._v("查找缓存：")]),t._v(" 它会拿着这个键去文件系统（或边缘缓存）中查找对应的缓存条目。")]),t._v(" "),s("li",[s("strong",[t._v("处理缓存：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("命中 (Cache HIT):")]),t._v(" 如果找到缓存且未过期（根据 "),s("code",[t._v("revalidate")]),t._v(" 时间判断），则直接返回缓存数据，"),s("strong",[t._v("完全跳过网络请求")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("过时 (Cache STALE):")]),t._v(" 如果找到缓存但已过期，Next.js 会"),s("strong",[t._v("立即返回旧的（stale）数据")]),t._v("给用户，保证快速响应，同时在"),s("strong",[t._v("后台触发一次新的网络请求")]),t._v("以更新缓存。这被称为 "),s("code",[t._v("stale-while-revalidate")]),t._v(" 策略。")]),t._v(" "),s("li",[s("strong",[t._v("未命中 (Cache MISS):")]),t._v(" 如果未找到缓存，则发起网络请求，获取数据后，将结果写入缓存，再返回给用户。")])])])])]),t._v(" "),s("li",[s("strong",[t._v("如何控制：")]),t._v(" 通过 "),s("code",[t._v("fetch")]),t._v(" 的 "),s("code",[t._v("next")]),t._v(" 选项：\n"),s("ul",[s("li",[s("code",[t._v("{ next: { revalidate: number } }")]),t._v(": 设置以秒为单位的缓存有效期。")]),t._v(" "),s("li",[s("code",[t._v("{ next: { tags: string[] } }")]),t._v(": 为缓存打上标签，用于按需失效。")]),t._v(" "),s("li",[s("code",[t._v("{ cache: 'no-store' }")]),t._v(": 完全禁用此层缓存，强制动态获取。")]),t._v(" "),s("li",[s("code",[t._v("{ cache: 'force-cache' }")]),t._v(": 默认行为，强制使用缓存。")])])])]),t._v(" "),s("h4",{attrs:{id:"第三层-全路由缓存-full-route-cache-即取-出餐台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三层-全路由缓存-full-route-cache-即取-出餐台"}},[t._v("🌙")]),t._v(" "),s("strong",[t._v("第三层：全路由缓存 (Full Route Cache) - “即取”出餐台")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("它是什么？")]),t._v(" 缓存一个路由完整渲染后的"),s("strong",[t._v("最终产物")]),t._v("，包括静态的 HTML 和动态部分的 RSC Payload。")]),t._v(" "),s("li",[s("strong",[t._v("它在哪里？")]),t._v(" 在服务器或 CDN 边缘节点上。")]),t._v(" "),s("li",[s("strong",[t._v("底层原理：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("静态路由：")]),t._v(" 如果一个路由及其所有子组件的数据获取都"),s("strong",[t._v("可以被缓存")]),t._v("（即没有使用 "),s("code",[t._v("no-store")]),t._v(" 或动态函数如 "),s("code",[t._v("cookies()")]),t._v("），Next.js 就认为该路由是"),s("strong",[t._v("静态的")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("构建时 ("),s("code",[t._v("next build")]),t._v(")：")]),t._v(" Next.js 会预渲染所有静态路由，将生成的 HTML 和 RSC Payload 作为静态文件存入缓存。")]),t._v(" "),s("li",[s("strong",[t._v("请求时：")]),t._v(" 对静态路由的请求可以直接由 CDN 或服务器提供这些文件，无需执行任何 React 渲染逻辑，速度极快。")]),t._v(" "),s("li",[s("strong",[t._v("失效机制：")]),t._v(" 这一层的缓存是"),s("strong",[t._v("被动失效")]),t._v("的。当它所依赖的**数据缓存（第二层）**因为时间到期或按需 "),s("code",[t._v("revalidate")]),t._v(" 而失效时，全路由缓存会被标记为“脏”。在下一个请求到达时，Next.js 会重新渲染该页面，并将新的产物更新到缓存中。你也可以通过 "),s("code",[t._v("revalidatePath")]),t._v(" 直接、主动地让它失效。")])])]),t._v(" "),s("li",[s("strong",[t._v("如何控制：")]),t._v(" 间接通过数据缓存策略控制，或通过 "),s("code",[t._v("revalidatePath('/path-to-revalidate')")]),t._v(" 主动控制。")])]),t._v(" "),s("h4",{attrs:{id:"第四层-路由缓存-router-cache-服务员的托盘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四层-路由缓存-router-cache-服务员的托盘"}},[t._v("🌙")]),t._v(" "),s("strong",[t._v("第四层：路由缓存 (Router Cache) - 服务员的托盘")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("它是什么？")]),t._v(" 一个"),s("strong",[t._v("客户端")]),t._v("的、存在于"),s("strong",[t._v("浏览器内存中")]),t._v("的缓存。它存储了用户已访问过的路由的 RSC Payload。")]),t._v(" "),s("li",[s("strong",[t._v("它在哪里？")]),t._v(" 用户浏览器的内存中，刷新页面即消失。")]),t._v(" "),s("li",[s("strong",[t._v("底层原理：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("RSC Payload：")]),t._v(" 这是 App Router 的核心。服务器组件在服务器上渲染后，不会生成 HTML 字符串，而是生成一种紧凑的、描述 UI 结构和内容的虚拟 DOM 格式（RSC Payload）。")]),t._v(" "),s("li",[s("strong",[t._v("导航：")]),t._v(" 当你使用 "),s("code",[t._v("<Link>")]),t._v(" 组件导航时，Next.js 客户端路由会：\n"),s("ol",[s("li",[s("strong",[t._v("预取 (Prefetch)：")]),t._v(" 默认情况下，当 "),s("code",[t._v("<Link>")]),t._v(" 进入视口，客户端会"),s("strong",[t._v("预先获取")]),t._v("目标路由的 RSC Payload 并存入路由缓存。")]),t._v(" "),s("li",[s("strong",[t._v("点击导航：")]),t._v(" 点击时，如果缓存中已有 Payload，React 会直接用它在客户端渲染出新页面的 UI，"),s("strong",[t._v("无需整页刷新")]),t._v("，实现了极快的“应用内”导航体验。")]),t._v(" "),s("li",[s("strong",[t._v("状态保持：")]),t._v(" 由于只是部分更新，共享的 "),s("code",[t._v("layout.js")]),t._v(" 组件及其 "),s("code",[t._v("useState")]),t._v(" 状态会被保留，不会重置。")])])])])]),t._v(" "),s("li",[s("strong",[t._v("如何控制：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("router.refresh()")]),t._v(": 这是主要的控制手段。它会清空"),s("strong",[t._v("当前路由")]),t._v("的路由缓存，并向服务器请求最新的 RSC Payload，用于在不丢失共享布局状态的情况下更新页面内容。")]),t._v(" "),s("li",[s("strong",[t._v("缓存寿命：")]),t._v(" 缓存有自动的有效期（动态页面30秒，静态页面5分钟），以确保用户最终能看到更新。")])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"二、最佳实践-best-practices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、最佳实践-best-practices"}},[t._v("🌙")]),t._v(" 二、最佳实践 (Best Practices)")]),t._v(" "),s("p",[t._v("根据你的应用场景，选择合适的缓存策略组合是关键。")]),t._v(" "),s("h4",{attrs:{id:"_1-优先静态化-最大化性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-优先静态化-最大化性能"}},[t._v("🌙")]),t._v(" 1. "),s("strong",[t._v("优先静态化：最大化性能")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("场景：")]),t._v(" 博客、文档、营销网站、公司官网等内容不频繁变更的页面。")]),t._v(" "),s("li",[s("strong",[t._v("实践：")]),t._v(" "),s("ul",[s("li",[t._v("在获取数据时，"),s("strong",[t._v("不要")]),t._v("添加任何 "),s("code",[t._v("revalidate")]),t._v(" 或 "),s("code",[t._v("cache")]),t._v(" 选项，让 "),s("code",[t._v("fetch")]),t._v(" 使用默认的永久缓存策略。")]),t._v(" "),s("li",[s("code",[t._v("next build")]),t._v(" 会将这些页面完全静态化，部署后由 CDN 全球分发，提供最佳的加载性能（TTFB 极低）。")]),t._v(" "),s("li",[t._v("当内容更新时（例如，通过 CMS），使用"),s("strong",[t._v("按需重新验证 (On-Demand Revalidation)")]),t._v("。")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-按需重新验证-内容驱动型应用的首选"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-按需重新验证-内容驱动型应用的首选"}},[t._v("🌙")]),t._v(" 2. "),s("strong",[t._v("按需重新验证：内容驱动型应用的首选")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("场景：")]),t._v(" 新闻网站、电商商品列表、内容管理系统（CMS）驱动的页面。")]),t._v(" "),s("li",[s("strong",[t._v("实践：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("为数据打标签 (Tagging):")]),t._v(" 在 "),s("code",[t._v("fetch")]),t._v(" 时，根据数据类型打上精细的标签。"),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取所有文章列表")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.../posts'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tags")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'posts'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取单篇文章")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(".../posts/")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tags")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'posts'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("post:")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])])]),t._v(" "),s("li",[s("strong",[t._v("设置 Webhook:")]),t._v(" 在你的 CMS 或后台系统中，当内容发生变化时，调用一个安全的 API 路由。")]),t._v(" "),s("li",[s("strong",[t._v("在 API 路由中触发失效:")]),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// app/api/revalidate/route.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" revalidateTag "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'next/cache'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("request")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" secret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("json")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("secret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REVALIDATION_TOKEN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("json")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Invalid token'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("status")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("401")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("json")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tag is required'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("status")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("revalidateTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e.g., 'posts' 或 'post:123'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("json")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("revalidated")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])])]),t._v(" "),s("li",[s("strong",[t._v("优势：")]),t._v(" 实现了内容的即时更新，同时在绝大多数时间里享受静态缓存带来的性能优势。")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-增量静态再生-isr-平衡时效与性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-增量静态再生-isr-平衡时效与性能"}},[t._v("🌙")]),t._v(" 3. "),s("strong",[t._v("增量静态再生 (ISR)：平衡时效与性能")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("场景：")]),t._v(" 社交媒体 Feed、热门榜单、股票信息等需要定期刷新但又能容忍短暂延迟的页面。")]),t._v(" "),s("li",[s("strong",[t._v("实践：")]),t._v(" "),s("ul",[s("li",[t._v("使用基于时间的重新验证。"),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每分钟更新一次排行榜")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.../leaderboard'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("revalidate")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])]),t._v(" "),s("li",[s("strong",[t._v("优势：")]),t._v(" 自动保持内容新鲜，无需手动干预，同时有效减少了对数据源的请求压力。")])])])]),t._v(" "),s("h4",{attrs:{id:"_4-策略性地选择动态渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-策略性地选择动态渲染"}},[t._v("🌙")]),t._v(" 4. "),s("strong",[t._v("策略性地选择动态渲染")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("场景：")]),t._v(" 用户仪表盘、购物车、基于 Cookie 或地理位置的个性化内容。")]),t._v(" "),s("li",[s("strong",[t._v("实践：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("对于整个页面：")]),t._v(" 如果整个页面都必须是动态的，可以在页面文件顶部导出 "),s("code",[t._v("export const dynamic = 'force-dynamic';")]),t._v("。这等同于将页面内所有 "),s("code",[t._v("fetch")]),t._v(" 都设置为 "),s("code",[t._v("cache: 'no-store'")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("对于部分组件：")]),t._v(" 这是 App Router 的强大之处。你可以让一个页面主体是静态缓存的，但其中一小部分组件（如显示用户名的 "),s("code",[t._v("Header")]),t._v("）是动态的。只需在该组件的数据获取中使用 "),s("code",[t._v("cache: 'no-store'")]),t._v(" 或动态函数 "),s("code",[t._v("cookies()")]),t._v("、"),s("code",[t._v("headers()")]),t._v("，Next.js 会在请求时动态渲染这部分，然后将其余静态部分组合起来。")]),t._v(" "),s("li",[s("strong",[t._v("Server Actions:")]),t._v(" 对于表单提交等写操作，使用 Server Actions。成功后，调用 "),s("code",[t._v("revalidateTag")]),t._v(" 或 "),s("code",[t._v("revalidatePath")]),t._v(" 来更新受影响的缓存，实现数据的闭环。")])])])]),t._v(" "),s("h4",{attrs:{id:"_5-理解客户端缓存的交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-理解客户端缓存的交互"}},[t._v("🌙")]),t._v(" 5. "),s("strong",[t._v("理解客户端缓存的交互")])]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("router.push('/path')")]),t._v(" vs "),s("code",[t._v("router.refresh()")])]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("<Link>")]),t._v(" 或 "),s("code",[t._v("router.push()")]),t._v(" 进行导航时，优先使用"),s("strong",[t._v("路由缓存（第四层）")]),t._v("，旨在快速切换视图。")]),t._v(" "),s("li",[t._v("当需要"),s("strong",[t._v("在当前页面")]),t._v("重新获取服务器数据时（例如，提交评论后刷新评论列表），使用 "),s("code",[t._v("router.refresh()")]),t._v("。它会绕过路由缓存，向服务器请求新数据，并平滑更新 UI。")])])])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("🌙")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("掌握 Next.js 缓存的关键在于理解其分层模型，并根据你的业务需求做出明智的选择：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("默认静态，按需更新")]),t._v(" 是最高性能的黄金法则。")]),t._v(" "),s("li",[t._v("使用 "),s("strong",[t._v("Tags")]),t._v(" 和 "),s("strong",[s("code",[t._v("revalidateTag")])]),t._v(" 来构建事件驱动的、即时更新的系统。")]),t._v(" "),s("li",[t._v("使用 "),s("strong",[s("code",[t._v("revalidate: seconds")])]),t._v(" 来实现自动、定期的内容刷新。")]),t._v(" "),s("li",[t._v("仅在绝对必要时才选择 "),s("strong",[s("code",[t._v("cache: 'no-store'")])]),t._v(" 或 "),s("code",[t._v("force-dynamic")]),t._v("。")]),t._v(" "),s("li",[t._v("善用 "),s("strong",[s("code",[t._v("router.refresh()")])]),t._v(" 来在客户端触发服务端数据的刷新。")])]),t._v(" "),s("p",[t._v("通过这套组合拳，可以为用户提供闪电般的加载速度和无缝的导航体验，同时保持后台数据的灵活性和实时性。")])])}),[],!1,null,null,null);s.default=e.exports}}]);