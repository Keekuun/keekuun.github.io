(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{804:function(s,e,t){"use strict";t.r(e);var r=t(2),n=Object(r.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"rpc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rpc"}},[s._v("🌙")]),s._v(" rpc")]),s._v(" "),e("p",[s._v("RPC（Remote Procedure Call）是一种远程过程调用协议，它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用关心底层网络细节。在分布式应用中，RPC是常用的通信方式之一。")]),s._v(" "),e("h1",{attrs:{id:"grpc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grpc"}},[s._v("🌙")]),s._v(" grpc")]),s._v(" "),e("p",[s._v("gRPC是一种高性能、开源和通用的远程过程调用（RPC）框架，它可以在任何地方运行。gRPC使客户端和服务器应用程序能够透明地通信，并简化了连接不同系统的复杂性。它基于HTTP/2协议标准设计，使用Protocol Buffers作为接口描述语言。")]),s._v(" "),e("h1",{attrs:{id:"protocol-buffers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#protocol-buffers"}},[s._v("🌙")]),s._v(" Protocol Buffers")]),s._v(" "),e("p",[s._v("Protocol Buffers是一种轻便高效的序列化数据结构的协议，它可以用于数据存储、通信协议等方面。它的优点是数据结构定义简单，序列化后的数据体积小，解析速度快，支持跨语言，适用于分布式系统中的数据交换和存储。")]),s._v(" "),e("div",{staticClass:"language-proto line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('syntax = "proto3";\n\npackage example;\n\nmessage Person {\n  string name = 1;\n  int32 age = 2;\n  repeated string hobbies = 3;\n}\n\n// Define the gRPC service\nservice ExampleService {\n  // Unary RPC method\n  rpc GetPerson(PersonRequest) returns (PersonResponse) {}\n\n  // Server streaming RPC method\n  rpc ListPeople(ListPeopleRequest) returns (stream PersonResponse) {}\n\n  // Client streaming RPC method\n  rpc AddPeople(stream PersonRequest) returns (AddPeopleResponse) {}\n\n  // Bidirectional streaming RPC method\n  rpc Chat(stream ChatRequest) returns (stream ChatResponse) {}\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("h1",{attrs:{id:"proto与struct"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proto与struct"}},[s._v("🌙")]),s._v(" proto与struct")]),s._v(" "),e("p",[s._v("在Go语言中，可以使用protobuf库将.proto文件中定义的消息类型转换为Go语言中的struct类型，也可以将Go语言中的struct类型转换为.proto文件中定义的消息类型。这样，就可以在gRPC中使用定义好的消息类型进行通信了。具体的转换方法可以参考protobuf库的文档。")])])}),[],!1,null,null,null);e.default=n.exports}}]);